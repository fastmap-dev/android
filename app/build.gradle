apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'com.jakewharton.hugo'

android {
    compileSdkVersion "${config.build_vers.androidCompileSdkVersion}".toInteger()
    buildToolsVersion "${config.build_vers.androidBuildToolsVersion}"
    defaultConfig {
        minSdkVersion "${config.build_vers.androidMinSdkVersion}".toInteger()
        targetSdkVersion "${config.build_vers.androidTargetSdkVersion}".toInteger()

        applicationId "${config.build_vers.appId}"
        versionCode "${config.build_vers.appVersionCode}".toInteger()
        versionName "${config.build_vers.appVersionName}"
        testInstrumentationRunner "${config.build_vers.testInstrumentationRunner}"
        testApplicationId "${config.build_vers.testAppId}"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        //Room to generate sql schema
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }
    signingConfigs {
        config {

        }
    }
    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            shrinkResources false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            signingConfig signingConfigs.config
            ndk {
                abiFilters = []
                abiFilters.addAll(['armeabi', 'armeabi-v7a', 'x86'])
            }
        }
        debug {
            versionNameSuffix "-" + getCurrentBranch()
            debuggable true
            jniDebuggable true
            minifyEnabled false
            shrinkResources false
            //            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            signingConfig signingConfigs.config
            ndk {
                abiFilters = []
                abiFilters.addAll(['armeabi', 'armeabi-v7a', 'x86'])
            }
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    dexOptions {
        javaMaxHeapSize "1g"
    }
    lintOptions {
        abortOnError false
        ignoreWarnings true
        quiet true
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            ignoreFailures = true
        }
        unitTests.includeAndroidResources = true
    }
    aaptOptions {
        useNewCruncher false
    }
    sourceSets {
        main {
            aidl.srcDirs = ['src/main/java']
            jni.srcDirs = []
            jniLibs.srcDir 'src/main/jniLibs'
        }
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/CERT.RSA'
        exclude 'META-INF'
    }

    flavorDimensions "default"
    productFlavors {
        prod {
            dimension "default"
        }

        priv {
            dimension "default"
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "OSC"
            def SEP = "_"
            def flavor = variant.name
            def version = variant.versionName

            def newApkName = project + SEP + flavor + SEP + version + ".apk"

            outputFileName = new File(newApkName)
        }
    }
}

task copyResDirectoryToClasses(type: Copy) {
    from "${projectDir}/src/test/res"
    into "${buildDir}/intermediates/classes/test/debug/res"
}

crashlytics {
    enableNdk true
    androidNdkOut 'build/intermediates/transforms/mergeJniLibs/release/folders/2000/1f/main/lib'
    androidNdkLibsOut 'build/intermediates/transforms/stripDebugSymbol/release/folders/2000/1f/main/lib' //path for jni libraries
}

task appDebug(dependsOn: [':app:assembleProdDebug'])
task appRelease(dependsOn: [':app:assembleProdRelease'])

task printAppNameVersion {
    doLast {
        print android.defaultConfig.versionName
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api files('libs/SKMaps.jar')
    api fileTree(dir: "$buildDir", include: 'native-libs.jar')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}

//library dependencies
apply from: 'dependencies.gradle'
//module dependencies
apply from: 'dependenciesAARs.gradle'
//Android x dependecies
apply from: 'dependenciesAndroidx.gradle'
//Test dependencies
apply from: 'dependenciesTest.gradle'
//plugins
apply plugin: 'com.google.gms.google-services'
apply plugin: 'project-report'

def getCurrentBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return branch.substring(0, 3)
}